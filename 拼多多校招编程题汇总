1、最大乘积
给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)
经过分析以后发现无非两种情况，要么排序后最大三个相乘取得最大，要么两个负数一个正数取得最大
class Solution:
    def max_multi(self,N,l):
        if N < 3:
            return None
        l = sorted(l)
        res = max(l[-1]*l[-2]*l[-3],l[0]*l[1]*l[-1])
        return res            
N = int(input())
l = list(map(int,input().split()))
s = Solution()
a = s.max_multi(N,l)
print(a)

1、A 国的手机号码由且仅由 N 位十进制数字(0-9)组成。一个手机号码中有至少 K 位数字相同则被定义为靓号。A 国的手机号可以有前导零，比如 000123456 是一个合法的手机号。
小多想花钱将自己的手机号码修改为一个靓号。修改号码中的一个数字需要花费的金额为新数字与旧数字之间的差值。比如将 1 修改为 6 或 6 修改为 1 都需要花 5 块钱。
给出小多现在的手机号码，问将其修改成一个靓号，最少需要多少钱？

先找改成哪个数字花费最小，然后根据花费的绝对值排序，先从左往右改比目标值更大的，这样最后结果字典序会小，再从后往前改

def select_phone_number(seq, k):
    front, rear = min(seq), max(seq)
    value, compare = 0, float('inf')
    for cur in range(front, rear+1):
        subtraction = [abs(cur-su) for su in seq]
        traction = sorted(subtraction)
        current = sum(traction[:k])
        if current < compare:
            compare = current
            value = cur
    pos = [value-su for su in seq]
    stand = sorted(list(set(map(lambda x: abs(x), pos))))
    while k > 0:
        nxt = min(stand)
        if nxt == 0:
            k -= pos.count(0)
            stand.remove(nxt)
            continue
        left = value + nxt
        while k > 0 and left in seq:
            li = seq.index(left)
            seq[li] = value
            k -= 1
        right = value - nxt
        while k > 0 and right in seq:
            ri = len(seq)-1-(seq[::-1].index(right))
            seq[ri] = value
            k -= 1
        stand.remove(nxt)
    return compare, seq
 
 
if __name__ == '__main__':
    [n, k] = list(map(int, input().strip().split()))
    seq = list(map(int, list(input().strip())))
    value, res = select_phone_number(seq, k)
    print(value)
    print(''.join(map(lambda ru: str(ru), res)))

2、小多想在美化一下自己的庄园。他的庄园毗邻一条小河，他希望在河边种一排树，共 M 棵。小多采购了 N 个品种的树，每个品种的数量是 Ai (树的总数量恰好为 M)。但是他希望任意两棵相邻的树不是同一品种的。小多请你帮忙设计一种满足要求的种树方案。

先检查是否一个品种的数量大于总数+1的一半，因为这样就不能满足相邻不是一个品种
然后先找是否有大于总数一半的，要先种下，用flag标记，这一次循环种了树就continue跳出这一轮，不然按顺序循环，只要当前数量不为0且不和前面品种一样就种，字典序会小

m=int(input())
nums = list(map(int,input().split()))
sum_nums=sum(nums)
if 2*max(nums)>(sum_nums+1):
    print("-")
else:
    res=[]
    pre=-1
    while sum_nums>0:
        i=0
        flag=0
        while i<m:
            if 2*nums[i]>sum_nums:
                res.append(i+1)
                sum_nums-=1
                nums[i]-=1
                pre=i
                flag=1
                break
            else:
                i+=1
        if flag==1:
            continue
        j=0
        while nums[j]==0 or j==pre:
            j+=1
        res.append(j+1)
        sum_nums-=1
        nums[j]-=1
        pre=j
print(" ".join(map(str,res)))

3、给定一个长度为偶数的数组arr，将该数组中的数字两两配对并求和，在这些和中选出最大和最小值，请问该如何两两配对，才能让最大值和最小值的差值最小？

排序后首尾组合就会最小

n = int(input())
arr = list(map(int,input().split()))
arr.sort()
value = [arr[i]+arr[-i-1] for i in range(n//2)]
res = max(value)-min(value)
print(res)

4、你在玩一个回合制角色扮演的游戏。现在你在准备一个策略，以便在最短的回合内击败敌方角色。在战斗开始时，敌人拥有HP格血量。当血量小于等于0时，敌人死去。一个缺乏经验的玩家可能简单地尝试每个回合都攻击。但是你知道辅助技能的重要性。
在你的每个回合开始时你可以选择以下两个动作之一：聚力或者攻击。
    聚力会提高你下个回合攻击的伤害。
    攻击会对敌人造成一定量的伤害。如果你上个回合使用了聚力，那这次攻击会对敌人造成buffedAttack点伤害。否则，会造成normalAttack点伤害。
给出血量HP和不同攻击的伤害，buffedAttack和normalAttack，返回你能杀死敌人的最小回合数。

如果buffed小于等于normal的两倍，那么一直攻击就好，如果大于，先用buff，然后判断剩下的能否一个normal解决

HP = int(input())
normalAttack = int(input())
buffedAttack = int(input())
res = 0
if buffedAttack <= 2*normalAttack:
    res = HP//normalAttack if HP%normalAttack == 0 else HP//normalAttack+1
else:
    res += 2*(HP//buffedAttack)
    temp = HP%buffedAttack
    if temp > 0 and temp <= normalAttack:
        res += 1
    elif temp > normalAttack:
        res += 2
print(res)

在商城的某个位置有一个商品列表，该列表是由L1、L2两个子列表拼接而成。当用户浏览并翻页时，需要从列表L1、L2中获取商品进行展示。展示规则如下：

1. 用户可以进行多次翻页，用offset表示用户在之前页面已经浏览的商品数量，比如offset为4，表示用户已经看了4个商品

2. n表示当前页面需要展示的商品数量

3. 展示商品时首先使用列表L1，如果列表L1长度不够，再从列表L2中选取商品

4. 从列表L2中补全商品时，也可能存在数量不足的情况

请根据上述规则，计算列表L1和L2中哪些商品在当前页面被展示了
每个测试输入包含1个测试用例，包含四个整数，分别表示偏移量offset、元素数量n，列表L1的长度l1，列表L2的长度l2。
在一行内输出四个整数分别表示L1和L2的区间start1，end1，start2，end2，每个数字之间有一个空格。

while True:
    try:
        offset, n, l1, l2 = list(map(int,input().split()))
        s1=e1=s2=e2=0
        if offset <= l1:
            if offset+n <= l1:
                s1,e1,s2,e2 = offset,offset+n,0,0
            elif offset+n > l1 and offset+n <= l1+l2:
                s1,e1,s2,e2 = offset,l1,0,offset+n-l1
            else:
                s1,e1,s2,e2 = offset,l1,0,l2
        elif offset > l1 and offset <= l1+l2:
            if offset+n <= l1+l2:
                s1,e1,s2,e2 = l1,l1,offset-l1,offset+n-l1
            else:
                s1,e1,s2,e2 = l1,l1,offset-l1,l2
        else:
            s1,e1,s2,e2 = l1,l1,l2,l2
        print(s1,e1,s2,e2)
    except:
        break
        

拼多多王国的城市和道路的拓扑结构比较特别，是一个树状结构：
1. 每个城市是树的一个节点；
2. 城市之间的道路是树的一条边；
3. 树的根节点是首都。
拼多多周年庆马上就要到了，这是拼多多王国的一个大日子。为了活跃气氛，国王想在道路上布置花灯。花灯可是很贵的东西，尽管国王想要在所有道路上都布置花灯，但是如果要花太多钱的话，是过不了财政大臣那一关的。国王把这个计划告诉财政大臣，最后他们商讨出来这么一个方案：
1. 一条道路要么不布置花灯，要么整条布置花灯，不能选择其中的某一段布置；
2. 除非没有道路通向首都，否则至少为一条通向首都的道路布置花灯；
3. 所有布置花灯的道路构成的子图是连通的，这保证国王从首都出发，能通过只走布置了花灯的道路，把所有的花灯游览完； 
4. 如果某个城市（包括首都）有大于等于2条道路通向子城市，为了防止铺张浪费，最多只能选择其中的两条路布置花灯；
5. 布置花灯的道路的总长度设定一个上限。
在上述方案下，国王想要使得布置花灯的道路长度越长越好，你帮国王想想办法。

dfs搜索所有可能路径的长度值。包括一个节点所有的儿子中选1个儿子，选2个儿子的情况（最多只能选择两条路布置）。
步骤如下：
根据输入，得到所有节点的父节点字典和两两节点连通关系字典；
找到根节点；
children集合维护每个节点的所有孩子节点，sets记录每个子节点的候选路径列表，对于候选路径集合，枚举三种情况：
一个子节点都不选：则cand集合里面插入0；
只选择一个子节点：枚举所有子节点，将子节点候选列表里的所有路径长度都加上其父节点到此子节点路径长度，然后再插入父节点的候选集合列表；
选择两个子节点：枚举所有两两子节点组合，把两子节点的候选集合排列组合相加，再加上各自到父节点路径长度，存入父节点候选集合列表。
找出根节点候选集合中不超过上限值的最大值，即为答案。

from collections import defaultdict

limit = int(input())
city = int(input())
tree = defaultdict(lambda :dict())
parent = {}
visited = {}
root = None

# build tree
for _ in range(city - 1):
    s = input().split()
    u, v, d = int(s[0]), int(s[1]), int(s[2])
    if d > limit:
        continue
    if not root:
        root = u
    parent[v] = u
    tree[u][v] = d

# find root
while parent.get(root, -1) != -1:
    root = parent.get(root)
    
'''
cand：候选队列，存放当前节点的所有可能路径长度
children：存放以当前节点为根节点的所有的子节点
sets：存放以当前节点为根节点的子树下，每个孩子节点的候选队列
'''
def dfs(u):
    if u not in visited:
        cand = set()
        cand.add(0)
        if u in tree:
            sets = []
            children = []
            for v in tree[u]:
                children.append(v)
                sets.append(dfs(v))
            for i in range(len(sets)):
                d = tree[u][children[i]]
                for c in sets[i]:
                    if d + c <= limit:
                        cand.add(d + c)
                for j in range(i + 1, len(sets)):
                    d2 = tree[u][children[j]]
                    for c in sets[i]:
                        for c2 in sets[j]:
                            if c + c2 + d + d2 <= limit:
                                cand.add(c + c2 + d + d2)
        visited[u] = cand
    return visited[u]

print(max(dfs(root)))

给出平面上的n个点，现在需要你求出，在这n个点里选3个点能构成一个三角形的方案有几种。
遍历所有三点组合，三点不共线即可组成三角形
判断三点是否共线：两条线段斜率是否相等？ (x1-x2) * (y1-y3) = (y1-y2) * (x1-x3)

from itertools import combinations
n = int(input())
dot = []
count =0
for i in range(n):
    dot.append(list(map(int,input().split())))
index = [i for i in range(n)]
combine = list(combinations(index,3))
for j in combine:
    if (dot[j[0]][0]-dot[j[1]][0])*(dot[j[0]][1]-dot[j[2]][1])!=(dot[j[0]][1]-dot[j[1]][1])*(dot[j[0]][0]-dot[j[2]][0]):
        count += 1

print(count)

有n只小熊，他们有着各不相同的战斗力。每次他们吃糖时，会按照战斗力来排，战斗力高的小熊拥有优先选择权。前面的小熊吃饱了，后面的小熊才能吃。每只小熊有一个饥饿值，每次进食的时候，小熊们会选择最大的能填饱自己当前饥饿值的那颗糖来吃，可能吃完没饱会重复上述过程，但不会选择吃撑。
现在给出n只小熊的战斗力和饥饿值，并且给出m颗糖能填饱的饥饿值。
求所有小熊进食完之后，每只小熊剩余的饥饿值。
num_bear,num_sugar = map(int,input().split())

sugar = list(map(int,input().split()))
sugar.sort(reverse=True)
dict_bear = dict()
i = 0
for line in range(num_bear):
    fight,hungry = map(int,input().split())
    dict_bear[i] =   [fight,hungry]
    i += 1
dict_id_sort = [i[0] for i in sorted(dict_bear.items(),key = lambda x:x[1][0],reverse=True)]

for i in dict_id_sort:
    for j in range(num_sugar):
        if dict_bear[i][1] >= sugar[j]:
            dict_bear[i][1] -= sugar[j]
            sugar[j] = 0
#dict_items([(0, [4, 4]), (1, [3, 0])])          
for i in range(num_bear):
    print(dict_bear[i][1])
